plugins {

    id "org.jetbrains.kotlin.jvm" version "1.3.20"

    id "edu.wpi.first.GradleRIO" version "2019.3.2"
    id "idea"

}


def ROBOT_MAIN_CLASS = "frc.team2767.healthcheck.MainKt"


deploy {
    targets {
        roboRIO("roborio") {
            team = frc.getTeamNumber() // loaded from .wpilib/wpilib_preferences.json
        }
    }
    artifacts {
        frcJavaArtifact("frcJava") {
            targets << "roborio"
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact("frcStaticFileDeploy") {
            // The directory below is the local directory to deploy
            files = fileTree(dir: "src/main/deploy")
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = "/home/lvuser/deploy"
        }
    }
}

repositories {
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    compile "ch.qos.logback:logback-classic:${logbackVersion}"
    compile "io.github.microutils:kotlin-logging:${kotlinLoggingVersion}"
    compile "org.jetbrains.kotlinx:kotlinx-html-jvm:0.6.+"

    // Testing
    testCompile "org.junit.jupiter:junit-jupiter-api:5.+"
    testCompile "org.junit.jupiter:junit-jupiter-params:5.+"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.+"
    testCompile "org.assertj:assertj-core:3.+"
    testCompile "com.nhaarman.mockitokotlin2:mockito-kotlin:2.+"
}


compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs = ['-progressive']
    }
}


jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

test {
    useJUnitPlatform()
}


